From 461f7d230c5a60640442d639da9232feee6f7942 Mon Sep 17 00:00:00 2001
From: RajaniRanjan <rajani.ranjan@intel.com>
Date: Wed, 1 Dec 2021 11:35:06 +0530
Subject: [PATCH] keyboard input support for multi-windows.

keyboard virtual input device support for PGP

Tracked-On: OAM-100023
Signed-off-by: RajaniRanjan <rajani.ranjan@intel.com>
---
 client/include/vInputClient.h | 16 ++++++++--
 client/src/main.c             | 51 +++++++++++++++++++++--------
 client/src/vInputClient.c     | 60 ++++++++++++++++++++---------------
 3 files changed, 85 insertions(+), 42 deletions(-)

diff --git a/client/include/vInputClient.h b/client/include/vInputClient.h
index ad81f14d..e95772e2 100644
--- a/client/include/vInputClient.h
+++ b/client/include/vInputClient.h
@@ -1,11 +1,21 @@
 #define XRES_MAX 600.00
 #define YRES_MAX 960.00
 #define LTRB_Y   292.00
-typedef enum {PRESS, RELEASE, MOVE} action;
+typedef enum {PRESS, RELEASE, MOVE, KEYDOWN, KEYUP} action;
 //typedef enum {ROTATION_0, ROTATION_1} rotation;
 
 int initvInputClient(const char []);
 void send_sync_event();
 void send_event(int32_t type, int32_t code, int32_t value);
-bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotation, u_int32_t dstRecth,u_int32_t dstRectw,u_int32_t dstRectx);
-
+typedef struct vinputEvent {
+    action a;
+    bool fullscreen;
+    u_int32_t x;
+    u_int32_t y;
+    int rotation;
+    u_int32_t dstRecth;
+    u_int32_t dstRectw;
+    u_int32_t dstRectx;
+    u_int32_t keys;
+} vinputEvent;
+bool vinput_touch(vinputEvent);
diff --git a/client/src/main.c b/client/src/main.c
index fd80333e..66b432e3 100644
--- a/client/src/main.c
+++ b/client/src/main.c
@@ -98,7 +98,6 @@ static void updatePositionInfo()
     state.dstRect.valid = true;
     state.scaleX = (float)state.srcSize.y / (float)state.dstRect.h;
     state.scaleY = (float)state.srcSize.x / (float)state.dstRect.w;
-
   }
 
   state.lgrResize = true;
@@ -685,8 +684,19 @@ void spiceClipboardRequest(const SpiceDataType type)
 
 int eventFilter(void * userdata, SDL_Event * event)
 {
-  static bool serverMode   = false;
+ // static bool serverMode   = false;
   static bool realignGuest = true;
+  struct vinputEvent ev;
+  SDL_Scancode sc = event->key.keysym.scancode;
+  uint32_t scancode = mapScancode(sc);
+  ev.fullscreen = state.fullscreen;
+  ev.x = event->button.x;
+  ev.y = event->button.y;
+  ev.rotation = state.rotate;
+  ev.dstRecth = state.dstRect.h;
+  ev.dstRectw = state.dstRect.w;
+  ev.dstRectx = state.dstRect.x;
+  ev.keys = scancode;
 
   switch(event->type)
   {
@@ -740,8 +750,9 @@ int eventFilter(void * userdata, SDL_Event * event)
     case SDL_MOUSEMOTION:
     {
 #ifdef USE_INTELVTOUCH
-      vinput_touch(MOVE,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
-      if (realignGuest)
+    ev.a = MOVE;
+    vinput_touch(ev);
+    if (realignGuest)
         realignGuest = false;
 #else
       if (!spice_running)
@@ -831,6 +842,10 @@ int eventFilter(void * userdata, SDL_Event * event)
 
     case SDL_KEYDOWN:
     {
+#ifdef USE_INTELVTOUCH
+    ev.a = KEYDOWN;
+    vinput_touch(ev);
+#else
       if (!spice_running)
       {
         if(params.useSpiceInput && !spice_ready())
@@ -872,11 +887,16 @@ int eventFilter(void * userdata, SDL_Event * event)
           break;
         }
       }
+#endif 
       break;
     }
-
+      
     case SDL_KEYUP:
     {
+#ifdef USE_INTELVTOUCH
+    ev.a = KEYUP;
+    vinput_touch(ev);
+#else
       if (!spice_running)
       {
         if(params.useSpiceInput && !spice_ready())
@@ -938,6 +958,7 @@ int eventFilter(void * userdata, SDL_Event * event)
         DEBUG_ERROR("SDL_KEYUP: failed to send message");
         break;
       }
+#endif
       break;
     }
 
@@ -965,9 +986,10 @@ int eventFilter(void * userdata, SDL_Event * event)
       }
       break;
 
-      case  SDL_FINGERDOWN:
+    case  SDL_FINGERDOWN:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(PRESS,state.fullscreen, event->tfinger.x, event->tfinger.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
+    ev.a = PRESS;
+    vinput_touch(ev);
 #else
       if (!spice_running)
       {
@@ -996,9 +1018,10 @@ int eventFilter(void * userdata, SDL_Event * event)
 #endif
       break;
 
-      case SDL_MOUSEBUTTONDOWN:
+    case SDL_MOUSEBUTTONDOWN:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(PRESS,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
+    ev.a = PRESS;
+    vinput_touch(ev);
 #else
       if (!spice_running)
       {
@@ -1027,9 +1050,10 @@ int eventFilter(void * userdata, SDL_Event * event)
 #endif
       break;
 
-      case  SDL_FINGERUP:
+    case  SDL_FINGERUP:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(RELEASE,state.fullscreen, event->tfinger.x, event->tfinger.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
+    ev.a = RELEASE;
+    vinput_touch(ev);
 #else
       if (!spice_running)
       {
@@ -1058,9 +1082,10 @@ int eventFilter(void * userdata, SDL_Event * event)
 #endif
       break;
 
-      case SDL_MOUSEBUTTONUP:
+    case SDL_MOUSEBUTTONUP:
 #ifdef USE_INTELVTOUCH
-      vinput_touch(RELEASE,state.fullscreen, event->button.x, event->button.y, state.rotate, state.dstRect.h,state.dstRect.w,state.dstRect.x);
+    ev.a = RELEASE;
+    vinput_touch(ev);
 #else
       if (!spice_running)
       {
diff --git a/client/src/vInputClient.c b/client/src/vInputClient.c
index f9159dda..0aa50f7a 100644
--- a/client/src/vInputClient.c
+++ b/client/src/vInputClient.c
@@ -68,33 +68,31 @@ void send_event(int32_t type, int32_t code, int32_t value) {
   mD.ev.type = type; mD.ev.code = code; mD.ev.value= value;
   msgsnd(mqId, &mD, sizeof(struct mQData), 0);
 }
-
-bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotation, u_int32_t dstRecth,u_int32_t dstRectw,u_int32_t dstRectx) {
+bool vinput_touch(struct vinputEvent ev){
 	if (mqId == -1) {
 		return false;
 	}
-
-	if (fullscreen == 1)
+	if (ev.fullscreen == 1)
 	{
-		switch (rotation) {
+		switch (ev.rotation) {
 		    case 1:
 		    case 3:
-			x -= dstRectx;
-			x *= XRES_MAX/dstRectw;
-			y *= XRES_MAX/dstRectw;
-			y += LTRB_Y;
+			ev.x -= ev.dstRectx;
+			ev.x *= XRES_MAX/ev.dstRectw;
+			ev.y *= XRES_MAX/ev.dstRectw;
+			ev.y += LTRB_Y;
 			break;
 
 		    case 2:
-			x -= dstRectx;
-			x *= XRES_MAX/dstRectw;
-			y *= YRES_MAX/dstRecth;
+			ev.x -= ev.dstRectx;
+			ev.x *= XRES_MAX/ev.dstRectw;
+			ev.y *= YRES_MAX/ev.dstRecth;
 			break;
 
 		    case 0:
-			x -= dstRectx;
-			x *= XRES_MAX/dstRectw;
-			y *= YRES_MAX/dstRecth;
+			ev.x -= ev.dstRectx;
+			ev.x *= XRES_MAX/ev.dstRectw;
+			ev.y *= YRES_MAX/ev.dstRecth;
 
 		    default:
 			break;
@@ -102,17 +100,17 @@ bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotati
 	}
 	else
         {
-                switch (rotation) {
+                switch (ev.rotation) {
                     case 1:
                     case 3:
-                        x *= XRES_MAX/YRES_MAX;
-                        y *= XRES_MAX/YRES_MAX;
-                        y += LTRB_Y;
+                        ev.x *= XRES_MAX/YRES_MAX;
+                        ev.y *= XRES_MAX/YRES_MAX;
+                        ev.y += LTRB_Y;
                         break;
 
                     case 2:
-                        x *= XRES_MAX/YRES_MAX;
-                        y *= YRES_MAX/XRES_MAX;
+                        ev.x *= XRES_MAX/YRES_MAX;
+                        ev.y *= YRES_MAX/XRES_MAX;
                         break;
 
                     case 0:
@@ -121,14 +119,14 @@ bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotati
 		}
         }
 
-	switch (a) {
+	switch (ev.a) {
 		case PRESS:
 			send_event(EV_ABS, ABS_MT_SLOT, 0);
 			send_event(EV_ABS, ABS_MT_TRACKING_ID, tracking_id++);
 			send_event(EV_ABS, ABS_PRESSURE, 50);
 			send_event(EV_ABS, ABS_MT_PRESSURE, 50);
-			send_event(EV_ABS, ABS_MT_POSITION_X, x);
-			send_event(EV_ABS, ABS_MT_POSITION_Y, y);
+			send_event(EV_ABS, ABS_MT_POSITION_X, ev.x);
+			send_event(EV_ABS, ABS_MT_POSITION_Y, ev.y);
 			send_event(EV_KEY, BTN_TOUCH, 1);
 			break;
 
@@ -139,10 +137,20 @@ bool vinput_touch(action a,bool fullscreen, u_int32_t x, u_int32_t y, int rotati
 			send_event(EV_ABS, ABS_MT_TRACKING_ID, -1);
 			send_event(EV_KEY, BTN_TOUCH, 0);
 			break;
+
 		case MOVE:
-			send_event(EV_ABS, ABS_MT_POSITION_X, x);
-			send_event(EV_ABS, ABS_MT_POSITION_Y, y);
+			send_event(EV_ABS, ABS_MT_POSITION_X, ev.x);
+			send_event(EV_ABS, ABS_MT_POSITION_Y, ev.y);
 			break;
+		
+		case KEYDOWN:
+			send_event(EV_KEY, ev.keys, 1);
+			break;
+		
+		case KEYUP:
+			send_event(EV_KEY, ev.keys, 0);
+			break;
+
 		default:
 			break;
 	}
-- 
2.25.1

